<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog 
	xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:n0="http://www.oracle.com/xml/ns/dbchangelog-ext" 
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
	http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
	<changeSet id="c174cb8b26cb3f5fedcf2157e6abbc616508a2f6" author="(INVENTORYUSER)-Generated" failOnError="false"   runOnChange="true" runAlways="false"  >
		<n0:createOracleProcedure objectName="INVENTORY_SERVICE" objectType="PROCEDURE" ownerName="INVENTORYUSER"  replaceIfExists="true" >
			<n0:source><![CDATA[
  CREATE OR REPLACE EDITIONABLE PROCEDURE "INVENTORYUSER"."INVENTORY_SERVICE" 
IS
  order_message VARCHAR2(32767);
  order_inv_id VARCHAR2(16);
  order_inv_loc VARCHAR2(32);
  order_json JSON_OBJECT_T;
  inventory_json JSON_OBJECT_T;
BEGIN
  LOOP
    -- Wait for and dequeue the next order message
    dequeue_order_message(
      in_wait_option    => -1,  -- Wait forever
      out_order_message => order_message);

    -- Parse the order message
    order_json := JSON_OBJECT_T.parse(order_message);
    order_inv_id := order_json.get_string('itemid');

    -- Check the inventory
    check_inventory(
      in_inventory_id        => order_inv_id,
      out_inventory_location => order_inv_loc);

    -- Construct the inventory message
    inventory_json := new JSON_OBJECT_T;
    inventory_json.put('orderid',           order_json.get_string('orderid'));
    inventory_json.put('itemid',            order_inv_id);
    inventory_json.put('inventorylocation', order_inv_loc);
    inventory_json.put('suggestiveSale',    'beer');

    -- Send the inventory message
    enqueue_inventory_message(
      in_inventory_message   => inventory_json.to_string() );

    -- commit
    commit;
  END LOOP;
END;
]]></n0:source>
		</n0:createOracleProcedure>
	</changeSet>
</databaseChangeLog>
